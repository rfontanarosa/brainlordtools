__author__ = "Roberto Fontanarosa"
__license__ = "GPLv2"
__version__ = ""
__maintainer__ = "Roberto Fontanarosa"
__email__ = "robertofontanarosa@gmail.com"

import csv, os, shutil, sqlite3, struct, sys

from rhtools3.Table import Table
from rhutils.db import insert_text, select_most_recent_translation
from rhutils.dump import read_text, write_text, dump_binary, insert_binary, get_csv_translated_texts
from rhutils.rom import crc32, expand_rom
from rhutils.snes import snes2pc_lorom, pc2snes_lorom

CRC32 = '5E1AA1A6'

FONT1_BLOCK = (0x54250, 0x54b40)
FONT2_BLOCK = (0x10000, 0x10e00)

MTE1_POINTERS_OFFSETS = (0x54a50, 0x54a71)
MTE2_POINTERS_OFFSETS = (0x54ac0, 0x54b41)

EXP_SIZE = 1048576

OFFSETS = ("107981", "108046", "108061", "108070", "108094", "108131", "108149", "108195", "108224", "108251", "108262", "108285", "108326", "108370", "108406", "108425", "108446", "108496", "108549", "108573", "108600", "108621", "108679", "108732", "108769", "108783", "108804", "108857", "108888", "108896", "108913", "108931", "108954", "108986", "109197", "109203", "109259", "109265", "109326", "109332", "109388", "109394", "109461", "109488", "109504", "109520", "109532", "109560", "109570", "109605", "109641", "109665", "109671", "109705", "109709", "109717", "109730", "109788", "109835", "109881", "109903", "109951", "109992", "110009", "110023", "110078", "110122", "110135", "110209", "110218", "110241", "110272", "110292", "110351", "110366", "110405", "110412", "110421", "110432", "110445", "110463", "110493", "110522", "110545", "110580", "110609", "110638", "110648", "110657", "110687", "110700", "110718", "110742", "110776", "110792", "110833", "110858", "110890", "110936", "110964", "110977", "111031", "111069", "111144", "111182", "111202", "111218", "111240", "111299", "111336", "111359", "111378", "111419", "111491", "111507", "111534", "111573", "111606", "111665", "111680", "111725", "111739", "111766", "111778", "111855", "111866", "111888", "111968", "112025", "112050", "112073", "112097", "112165", "112192", "112230", "112235", "112267", "112274", "112322", "112375", "112465", "112512", "112577", "112637", "112648", "112673", "112697", "112720", "112775", "112800", "112804", "112866", "112894", "112935", "113875", "113913", "113948", "113961", "114036", "114076", "114184", "114223", "114292", "114354", "114401", "114487", "114538", "217536", "217569", "217626", "217693", "217783", "217844", "217892", "217955", "217988", "218074", "114702", "114714", "114730", "114768", "114780", "114815", "114835", "114880", "114888", "114929", "114975", "115039", "115205", "115219", "115245", "115264", "115269", "115324", "115349", "115391", "115428", "115434", "115469", "115533", "115583", "115612", "115657", "115728", "115804", "115913", "115971", "116014", "116064", "116106", "116161", "116249", "116265", "116356", "116408", "116423", "116472", "116476", "116509", "116563", "116578", "116647", "116724", "116739", "116762", "116800", "116831", "116913", "116927", "116942", "116978", "116984", "117006", "117012", "117034", "117048", "117076", "117097", "117116", "117131", "117170", "117182", "117225", "117601", "117640", "117674", "117686", "117724", "117729", "117757", "117763", "117786", "117794", "117806", "117821", "117854", "117860", "117866", "117914", "117944", "117991", "118141", "118206", "118223", "118239", "118266", "118329", "118373", "118432", "118460", "118533", "118564", "118583", "118598", "118610", "118653", "118659", "118695", "118733", "118793", "118819", "118841", "118901", "118911", "118946", "119010", "119035", "119047", "119058", "119066", "119096", "119105", "119135", "119163", "119168", "119185", "119239", "119258", "119268", "119306", "119332", "119345", "119362", "119367", "119407", "119427", "119465", "119476", "119483", "119503", "119516", "119536", "119594", "119634", "119680", "119725", "119792", "119857", "119879", "119902", "119923", "119959", "120029", "120049", "120098", "120147", "120180", "120241", "120269", "120341", "120415", "120473", "120529", "120576", "120614", "120662", "120703", "120756", "120812", "120838", "120860", "120885", "120908", "120940", "120992", "121049", "121083", "121120", "121183", "121219", "121285", "121316", "121335", "121374", "121418", "121453", "121493", "121610", "121635", "121700", "121722", "121734", "121762", "121766", "121808", "121827", "121886", "121955", "121980", "121986", "122011", "122017", "122042", "122066", "122084", "122126", "122132", "122145", "122155", "122161", "122182", "122199", "122230", "122269", "122295", "122325", "122380", "122409", "122435", "122480", "122551", "122573", "122590", "122649", "122681", "122736", "122749", "122792", "122828", "122885", "122933", "122943", "122968", "123012", "123016", "123037", "123049", "123092", "123143", "123163", "123224", "123259", "123299", "123344", "123378", "123441", "123465", "123524", "123588", "123595", "123661", "123706", "123767", "123799", "123804", "123875", "123926", "123957", "124011", "124017", "124051", "124124", "124155", "124190", "124243", "124267", "124312", "124368", "124429", "124465", "124488", "124518", "124552", "124608", "124644", "124681", "124711", "124775", "124795", "124825", "124832", "124877", "124960", "125006", "125056", "125129", "125164", "125227", "125268", "125317", "125381", "125419", "125486", "125533", "125585", "125640", "125656", "125706", "125721", "125767", "125799", "125881", "125905", "125939", "125968", "126019", "126087", "126150", "126187", "126248", "126293", "126357", "126376", "126392", "126422", "126475", "126537", "126596", "126669", "126709", "126770", "126832", "126905", "126968", "127001", "127036", "127059", "127107", "127148", "127192", "127214", "127236", "127259", "127309", "127370", "127392", "127426", "127467", "127536", "127593", "127643", "127662", "127700", "127745", "127762", "127794", "127844", "127898", "127937", "127977", "128029", "128084", "128129", "128175", "128217", "128270", "128347", "128386", "128415", "128475", "128498", "128543", "128568", "128605", "128630", "128660", "128675", "128705", "128743", "128792", "128819", "128851", "128882", "128901", "128930", "128949", "128993", "129021", "129051", "129069", "129096", "129100", "129108", "129138", "129163", "129183", "129197", "129226", "129267", "129284", "129313", "129329", "129378", "129432", "129463", "129499", "129536", "129579", "129617", "129656", "129699", "129737", "129767", "129799", "129844", "129853", "129893", "129941", "129956", "129972", "130001", "130026", "130058", "130152", "130159", "130185", "130223", "130247", "130280", "130295", "130310", "130355", "130365", "130374", "130387", "130404", "130417", "130469", "130505", "130518", "130542", "130551", "130589", "130637", "130686", "130713", "130741", "130796", "130830", "130841", "130909", "130931", "130986", "131035", "131060", "131071", "131117", "131131", "131161", "131169", "131187", "131270", "131285", "131327", "131371", "131391", "131439", "131465", "131480", "131515", "131548", "131575", "131584", "131631", "131657", "131701", "131757", "131789", "131814", "131825", "131833", "131871", "131913", "131952", "131989", "131995", "132034", "132070", "132078", "132110", "132129", "132172", "132229", "132270", "132467", "132532", "132608", "132654", "132720", "132754", "132782", "132815", "132856", "132903", "132955", "132997", "133069", "133089", "133123", "133204", "133219", "133289", "133341", "133355", "133392", "133413", "133434", "133453", "133502", "133525", "133558", "133566", "133624", "133652", "133694", "133711", "133744", "133761", "133794", "133843", "133886", "133919", "133949", "133959", "134033", "134092", "134124", "134170", "134216", "134252", "134310", "134330", "134392", "134455", "134492", "134506", "134558", "134617", "134637", "134688", "134700", "134764", "134842", "134858", "134868", "134919", "134940", "135003", "135064", "135134", "135155", "135173", "135187", "135226", "135248", "135320", "135374", "135408", "135423", "135445", "135502", "135535", "135581", "135633", "135690", "135706", "135731", "135746", "135817", "135873", "135887", "135902", "135927", "135957", "135988", "136011", "136119", "136128", "136148", "136221", "136258", "136281", "136349", "136389", "136422", "136458", "136522", "136544", "136570", "136602", "136612", "136634", "136665", "136724", "136747", "136794", "136848", "136880", "136910", "136927", "136956", "136978", "137022", "137028", "137056", "137061", "137073", "137125", "137144", "137179", "137191", "137264", "137279", "137313", "137324", "137369", "137390", "137407", "137454", "137465", "137480", "137488", "137519", "137591", "137618", "137650", "137666", "137681", "137702", "137754", "137785", "137823", "137844", "137889", "137929", "137986", "138000", "138029", "138086", "138143", "138156", "138169", "138181", "138235", "138244", "138302", "138333", "138363", "138409", "138436", "138497", "138505", "138514", "138597", "138625", "138717", "138794", "138804", "138870", "138918", "138978", "139008", "139032", "139079", "139159", "139230", "139240", "139299", "139339", "139392", "139424", "139453", "139488", "139512", "139563", "139632", "139666", "139691", "139757", "139825", "139867", "139911", "139963", "139986", "139993", "140005", "140028", "140074", "140095", "140103", "140120", "140145", "140184", "140201", "140230", "140265", "140310", "140316", "140329", "140371", "140386", "140408", "140424", "140465", "140496", "140516", "140553", "140568", "140613", "140663", "140704", "140775", "140804", "140865", "140920", "140976", "141021", "141050", "141094", "141132", "141187", "141259", "141293", "141317", "141356", "141372", "141425", "141441", "141503", "141528", "141581", "141602", "141672", "141680", "141730", "141757", "141801", "141824", "141858", "141873", "141932", "142006", "142044", "142049", "142086", "142136", "142181", "142207", "142230", "142263", "142322", "142379", "142399", "142423", "142450", "142542", "142570", "142580", "142625", "142669", "142692", "142749", "142797", "142820", "142859", "142878", "142899", "142927", "142931", "142951", "142990", "142999", "143028", "143063", "143109", "143151", "143187", "143191", "143259", "143292", "143321", "143387", "143412", "143466", "143504", "143557", "143587", "143676", "143737", "143874", "143908", "143925", "143982", "144019", "144080", "144141", "144196", "144252", "144326", "144409", "144465", "144481", "144508", "144548", "144569", "144591", "144647", "144695", "144722", "144744", "144806", "144877", "144907", "144967", "144987", "145042", "145076", "145134", "145192", "145233", "145247", "145287", "145304", "145361", "145404", "145469", "145519", "145550", "145592", "145667", "145736", "145789", "145799", "145881", "145937", "145947", "145995", "146045", "146055", "146096", "146150", "146160", "146211", "146267", "146277", "146330", "146388", "146398", "146469", "146505", "146553", "146568", "146614", "146665", "146722", "146755", "146811", "146830", "146888", "146909", "146961", "146982", "147038", "147059", "147117", "147138", "147198", "147220", "147258", "147332", "147394", "147459", "147527", "147545", "147595", "147641", "147722", "147790", "147851", "148004", "148060", "148076", "148254", "148282", "148325", "148353", "148410", "148438", "148507", "148535", "148612", "148640", "148720", "148748", "148857", "148898", "148948", "148998", "149048", "149098", "149148", "149263", "149304", "149314", "149342", "149392", "149415", "149431", "149447", "149514", "149560", "149592", "149628", "149659", "149672", "149728", "149791", "149832", "149842", "149906", "149947", "149957", "150061", "150102", "150112", "150130", "150150", "150159", "150185", "150218", "150252", "150270", "150300", "150371", "150384", "150390", "150397", "150435", "150443", "150503", "150544", "150554", "150636", "150677", "150687", "150771", "150806", "150840", "150861", "150929", "150935", "150958", "150969", "150991", "150998", "151040", "151074", "151153", "151163", "151218", "151254", "151264", "151278", "151283", "151346", "151358", "151414", "151467", "151487", "151518", "151549", "151605", "151658", "151710", "151734", "151794", "151828", "151851", "151883", "151903", "151964", "151977", "152011", "152032", "152042", "152066", "152106", "152165", "152224", "152247", "152255", "152299", "152342", "152393", "152420", "152465", "152534", "152573", "152634", "152645", "152679", "152689", "152708", "152729", "152743", "152778", "152822", "152855", "152891", "152917", "152965", "153000", "153042", "153089", "153140", "153193", "153250", "153274", "153343", "153368", "153388", "153413", "153452", "153471", "153505", "153510", "153572", "153678", "153717", "153876", "153904", "153949", "153987", "154015", "154019", "154052", "154063", "154085", "154115", "154164", "154218", "154244", "154296", "154344", "154350", "154356", "154406", "154429", "154477", "154491", "154500", "154532", "154568", "154608", "154633", "154649", "154668", "154692", "154725", "154808", "154842", "154865", "154895", "154912", "154935", "154959", "154983", "155019", "155073", "155109", "155178", "155246", "155282", "155341", "155389", "155449", "155506", "155541", "155568", "155608", "155651", "155686", "155736", "155769", "155807", "155848", "155895", "155965", "156013", "156032", "156042", "156088", "156101", "156143", "156179", "156214", "156239", "156324", "156432", "156485", "156535", "156578", "156641", "156688", "156716", "156747", "156795", "156827", "156868", "156911", "156965", "157008", "157039", "157081", "157097", "157158", "157212", "157242", "157301", "157322", "157357", "157410", "157463", "157507", "157542", "157586", "157626", "157701", "157736", "157770", "157799", "157827", "157858", "157923", "157976", "158011", "158032", "158061", "158079", "158093", "158115", "158140", "158162", "158193", "158236", "158295", "158309", "158361", "158407", "158474", "158480", "158516", "158566", "158612", "158679", "158736", "158780", "158795", "158823", "158841", "158852", "158899", "158936", "159000", "159023", "159050", "159076", "159123", "159188", "159229", "159285", "159294", "159346", "159394", "159440", "159474", "159543", "159600", "159641", "159688", "159749", "159777", "159821", "159851", "159861", "159900", "159962", "159972", "160006", "160010", "160033", "160073", "160143", "160179", "160232", "160307", "160319", "160325", "160349", "160361", "160392", "160441", "160482", "160529", "160564", "160600", "160637", "160659", "160699", "160705", "160736", "160791", "160827", "160873", "160906", "160940", "160986", "161065", "161113", "161128", "161136", "161166", "161177", "161235", "161282", "161330", "161391", "161466", "161534", "161609", "161643", "161685", "161738", "161756", "161799", "161862", "161904", "161946", "161966", "162026", "162041", "162066", "162078", "162128", "162143", "162182", "162237", "162276", "162280", "162306", "162319", "162358", "162391", "162413", "162464", "162493", "162514", "162528", "162564", "162582", "162604", "162629", "162677", "162730", "162759", "162799", "162842", "162852", "162912", "162983", "163009", "163067", "163130", "163173", "163203", "163240", "163277", "163297", "163327", "163353", "163368", "163446", "163477", "163497", "163546", "163555", "163581", "163602", "163607", "163688", "163731", "163762", "163782", "163832", "163871", "163955", "164027", "164036", "164057", "164106", "164150", "164199", "164235", "164263", "164302", "164343", "164373", "164441", "164472", "164524", "164589", "164640", "164653", "164684", "164755", "164784", "164831", "164869", "164881", "164927", "165030", "165078", "165095", "165132", "165181", "165235", "165282", "165311", "165354", "165388", "165412", "165470", "165497", "165544", "165565", "165575", "165589", "165644", "165682", "165811", "165858", "165888", "165916", "165963", "166001", "166041", "166051", "166076", "166094", "166105", "166159", "166202", "166218", "166277", "166306", "166319", "166362", "166370", "166387", "166418", "166445", "166474", "166512", "166542", "166554", "166568", "166619", "166637", "166668", "166711", "166723", "166762", "166806", "166817", "166823", "166831", "166855", "166897", "166910", "166957", "167004", "167023", "167044", "167078", "167122", "167154", "167178", "167194", "167271", "167298", "167314", "167404", "167429", "167448", "167467", "167505", "167537", "167563", "167601", "167621", "167662", "167745", "167783", "167798", "167829", "167853", "167897", "167948", "168004", "168033", "168076", "168145", "168189", "168206", "168224", "168274", "168290", "168345", "168371", "168437", "168453", "168509", "168525", "168591", "168601", "168631", "168680", "168728", "168755", "168773", "168816", "168856", "168910", "168973", "169038", "169094", "169110", "169164", "169213", "169270", "169302", "169332", "169355", "169385", "169413", "169423", "169464", "169489", "169513", "169530", "169571", "169592", "169636", "169782", "169798", "169829", "169874", "169916", "169951", "169974", "170023", "170039", "170117", "170136", "170219", "170253", "170279", "170310", "170337", "170368", "170394", "170404", "170459", "170483", "170518", "170532", "170545", "170569", "170589", "170609", "170653", "170775", "170868", "170942", "170999", "171041", "171068", "171095", "171117", "171127", "171162", "171173", "171186", "171238", "171254", "171280", "171289", "171387", "171412", "171436", "171453", "171494", "171515", "171559", "171603", "171658", "171705", "171739", "171754", "171822", "171872", "171920", "171951", "172023", "172088", "172120", "172196", "172240", "172293", "172365", "172420", "172435", "172459", "172498", "172536", "172546", "172564", "172595", "172619", "172652", "172687", "172722", "172745", "172792", "172803", "172858", "172926", "172983", "173033", "173052", "173104", "173169", "173244", "173284", "173336", "173388", "173434", "173468", "173497", "173524", "173544", "173558", "173598", "173627", "173686", "173696", "173706", "173739", "173768", "173775", "173824", "173832", "173852", "173858", "173887", "173928", "173987", "174021", "174061", "174073", "174110", "174154", "174195", "174210", "174243", "174311", "174346", "174401", "174419", "174474", "174501", "174559", "174576", "174612", "174635", "174668", "174688", "174704", "174713", "174729", "174780", "174797", "174836", "174855", "174914", "174946", "174980", "175021", "175090", "175104", "175118", "175170", "175253", "175319", "175348", "175401", "175416", "175463", "175489", "175530", "175570", "175596", "175629", "175665", "175702", "175746", "175781", "175817", "175827", "175867", "175917", "175949", "176022", "176040", "176078", "176152", "176189", "176204", "176212", "176231", "176262", "176298", "176362", "176395", "176432", "176476", "176541", "176581", "176621", "176664", "176704", "176729", "176792", "176829", "176876", "176898", "176911", "176992", "177032", "177081", "177145", "177200", "177232", "177254", "177309", "177357", "177408", "177461", "177504", "177546", "177623", "177662", "177697", "177756", "177804", "177814", "177876", "177911", "177971", "178004", "178063", "178110", "178144", "178158", "178192", "178230", "178267", "178293", "178312", "178342", "178384", "178427", "178473", "178506", "178590", "178611", "178637", "178659", "178687", "178721", "178754", "178797", "178865", "178920", "178939", "179101", "179112", "179148", "179248", "179296", "179324", "179360", "179385", "179391", "179397", "179407", "179438", "179463", "179469", "179475", "179497", "179550", "179574", "179628", "179635", "179649", "179718", "179781", "179831", "179846", "179888", "179944", "179958", "180001", "180035", "180044", "180112", "180180", "180232", "180294", "180333", "180359", "180434", "180462", "180493", "180503", "180547", "180578", "180597", "180633", "180651", "180703", "180725", "180749", "180769", "180778", "180811", "180824", "180832", "180845", "180878", "180943", "180954", "180976", "181029", "181072", "181104", "181142", "181151", "181177", "181191", "181212", "181256", "181310", "181354", "181385", "181443", "181467", "181511", "181534", "181542", "181576", "181639", "181660", "181692", "181716", "181741", "181751", "181808", "181857", "181880", "181929", "181946", "181995", "182035", "182052", "182098", "182152", "182188", "182223", "182260", "182307", "182356", "182413", "182442", "182483", "182508", "182543", "182570", "182599", "182615", "182649", "182712", "182743", "182776", "182843", "182916", "182976", "183026", "183077", "183134", "183146", "183204", "183263", "183278", "183315", "183357", "183364", "183417", "183454", "183458", "183509", "183514", "183571", "183605", "183611", "183654", "183700", "183721", "183796", "183812", "183870", "183895", "183931", "184022", "184038", "184068", "184075", "184089", "184100", "184145", "184186", "184214", "184247", "184262", "184307", "184376", "184391", "184466", "184474", "184540", "184564", "184642", "184657", "184706", "184745", "184769", "184826", "184845", "184909", "184955", "184972", "185031", "185044", "185084", "185130", "185156", "185170", "185224", "185275", "185308", "185334", "185359", "185393", "185425", "185454", "185488", "185513", "185540", "185554", "185673", "185713", "185736", "185764", "185791", "185820", "185852", "185866", "185894", "185942", "185948", "186000", "186017", "186047", "186076", "186117", "186151", "186170", "186200", "186260", "186277", "186340", "186346", "186432", "186449", "186461", "186500", "186524", "186547", "186552", "186557", "186573", "186622", "186701", "186727", "186763", "186832", "186856", "186866", "186880", "186927", "187013", "187053", "187075", "187098", "187120", "187167", "187242", "187274", "187313", "187328", "187352", "187409", "187450", "187489", "187508", "187548", "187594", "187649", "187692", "187719", "187772", "187803", "187849", "187883", "187910", "187941", "187959", "187994", "188009", "188024", "188054", "188131", "188186", "188239", "188282", "188296", "188351", "188385", "188413", "188421", "188488", "188500", "188567", "188621", "188625", "188660", "188728", "188756", "188814", "188845", "188866", "188920", "188984", "189028", "189060", "189097", "189136", "189168", "189185", "189244", "189262", "189280", "189345", "189380", "189472", "189514", "189570", "189620", "189627", "189668", "189702", "189712", "189747", "189776", "189827", "189873", "189894", "189955", "189983", "190011", "190048", "190082", "190113", "190141", "190174", "190217", "190224", "190261", "190297", "190337", "190394", "190414", "190475", "190577", "190602", "190684", "190727", "190803", "190887", "191067", "191087", "191138", "191159", "191166", "191222", "191243", "191247", "191267", "191296", "191321", "191366", "191428", "191476", "191525", "191571", "191612", "191649", "191691", "191725", "191745", "191754", "191791", "191806", "191824", "191838", "191903", "191953", "191983", "192015", "192058", "192068", "192085", "192115", "192160", "192177", "192224", "192270", "192331", "192381", "192435", "192479", "192531", "192553", "192596", "192618", "192652", "192679", "192718", "192752", "192779", "192840", "192873", "192880", "192902", "192922", "193055", "193072", "193095", "193121", "193159", "193204", "193231", "193292", "193335", "193385", "193429", "193477", "193503", "193549", "193558", "193599", "193610", "193658", "193663", "193703", "193758", "193803", "193867", "193917", "193954", "194003", "194034", "194086", "194139", "194154", "194206", "194240", "194258", "194322", "194337", "194367", "194397", "194469", "194482", "194500", "194591", "194658", "194707", "194768", "194811", "194850", "194890", "194915", "194939", "194969", "195032", "195084", "195099", "195169", "195185", "195236", "195260", "195287", "195355", "195398", "195419", "195452", "195511", "195534", "195557", "195618", "195670", "195733", "195767", "195777", "195837", "195889", "195925", "195951", "196013", "196031", "196107", "196149", "196203", "196255", "196319", "196338", "196386", "196401", "196423", "196496", "196507", "196562", "196579", "196610", "196667", "196731", "196741", "196802", "196847", "196879", "196934", "197035", "197059", "197198", "197208", "197212", "197221", "197251", "197255", "197291", "197348", "197383", "197408", "197450", "197483", "197546", "197602", "197617", "197625", "197652", "197671", "197738", "197782", "197828", "197861", "197914", "197984", "198045", "198130", "198144", "198157", "198181", "198201", "198221", "198240", "198281", "198290", "198324", "198342", "198394", "198406", "198430", "198485", "198558", "198585", "198642", "198683", "198701", "198755", "198768", "198839", "198871", "198887", "198941", "199001", "199017", "199045", "199079", "199110", "199148", "199184", "199221", "199235", "199283", "199342", "199377", "199434", "199456", "199474", "199525", "199551", "199569", "199589", "199597", "199684", "199732", "199752", "199782", "199848", "199896", "199953", "200025", "200064", "200079", "200087", "200104", "200126", "200148", "200197", "200269", "200282", "200300", "200350", "200405", "200450", "200518", "200564", "200606", "200654", "200673", "200710", "200759", "200790", "200808", "200844", "200868", "200892", "200909", "200969", "201054", "201195", "201261", "201310", "201383", "201431", "201455", "201501", "201534", "201609", "201684", "201717", "201731", "201744", "201768", "201788", "201808", "201827", "201856", "201866", "201911", "201933", "201966", "202025", "202048", "202058", "202083", "202101", "202141", "202158", "202198", "202256", "202313", "202388", "202410", "202431", "202508", "202545", "202560", "202582", "202604", "202635", "202657", "202667", "202689", "202746", "202790", "202834", "202903", "202932", "202976", "203039", "203087", "203112", "203166", "203194", "203205", "203268", "203321", "203388", "203429", "203467", "203484", "203525", "203564", "203613", "203648", "203676", "203715", "203733", "203750", "203760", "203771", "203820", "203861", "203890", "203960", "204000", "204089", "204121", "204139", "204155", "204172", "204192", "204221", "204236", "204298", "204321", "204379", "204420", "204467", "204540", "204609", "204650", "204684", "204698", "204719", "204749", "204815", "204865", "204888", "204906", "204980", "205076", "205090", "205103", "205127", "205147", "205167", "205186", "205296", "205357", "205393", "205595", "205628", "205740", "205799", "205840", "205906", "205989", "206006", "206074", "206110", "206151", "206208", "206252", "206264", "206325", "206345", "206361", "206404", "206456", "206565", "206583", "206595", "206642", "206671", "206709", "206740", "206761", "206793", "206831", "206860", "206936", "207054", "207091", "207108", "207144", "207201", "207231", "207237", "207315", "207351", "207381", "207445", "207490", "207507", "207527", "207627", "207662", "207678", "207697", "207703", "207714", "207727", "207769", "207819", "207889", "207909", "207978", "207984", "208017", "208031", "208056", "208062", "208093", "208134", "208172", "208189", "208197", "208226", "208254", "208296", "208301", "208342", "208383", "208407", "208430", "208458", "208474", "208499", "208504", "208516", "208541", "208545", "208562", "208566", "208597", "208616", "208636", "208667", "208672", "208687", "208700", "208716", "208742", "208844", "208910", "208925", "208954", "208983", "208993", "209036", "209084", "209123", "209187", "209213", "209221", "209241", "209266", "209289", "209330", "209384", "209414", "209430", "209493", "209522", "209553", "209578", "209615", "209633", "209666", "209681", "209715", "209720", "209749", "209779", "209807", "209859", "209898", "209913", "209927", "209957", "209972", "210003", "210040", "210058", "210123", "210167", "210188", "210226", "210263", "210282", "210303", "210375", "210425", "210471", "210535", "210661", "210695", "210707", "210723", "210754", "210803", "210837", "210852", "210860", "210894", "210910", "210952", "211014", "211054", "211098", "211158", "211186", "211237", "211283", "211321", "211378", "211426", "211460", "211477", "211543", "211601", "211640", "211681", "211720", "211767", "211790", "211822", "211952", "212005", "212054", "212100", "212112", "212139", "212161", "212188", "212238", "212251", "212294", "212322", "212377", "212434", "212511", "212553", "212595", "212623", "212651", "212687", "212704", "212735", "212761", "212795", "212825", "212868", "212894", "212922", "212955", "212992", "213043", "213176", "213190", "213203", "213227", "213247", "213267", "213286", "213335", "213363", "213393", "213417", "213441", "213465", "213489", "213625", "213653", "213726", "213774", "213829", "214014", "214091", "214139", "214175", "214184", "214210", "214229", "214377", "214394", "214439", "214456", "214469", "214488", "214548", "214581", "214627", "214633", "214683", "214695", "214773", "214779", "214820", "214845", "214861", "214919", "214933", "214983", "214997", "215034", "215046", "215079", "215132", "215154", "215194", "215201", "215254", "215271", "215304", "215329", "215341", "215357", "215367", "215380", "215413", "215430", "215463", "215499", "215536", "215555", "215612", "215772", "215792", "215824", "215840", "215870", "215899", "215940", "215994", "216047", "216075", "216116", "216142", "216173", "216212", "216269", "216314", "216342", "216386", "216405", "216457", "216509", "216544", "216580", "216634", "216655", "216678", "216724", "216748", "216796", "216821", "216881", "216918", "216952", "216970", "216995", "217026", "217056", "217080", "217105", "217155", "217247", "217265", "217282", "217311", "217375", "217536", "217569", "217626", "217693", "217783", "217844", "217892", "217955", "217988", "218074", "218307", "218323", "218391", "218419", "218438", "218456", "218468", "218536", "218560", "218622", "218644", "218670", "218713", "218740", "218764", "218775", "218803", "218850", "218862", "218898", "218918", "218941", "219014", "219021", "219045", "219098", "219104", "219161", "219222", "219259", "219272", "219285", "219352", "219380", "219405", "219413", "219439", "219453", "219476", "219482", "219529", "219536", "219580", "219624", "219660", "219666", "219698", "219709", "219763", "219803", "219815", "219854", "219910", "219980", "219992", "220012", "220059", "220077", "220090", "220115", "220162", "220178", "220201", "220206", "220219", "220365", "220383", "220396", "220416", "220450", "220483", "220489", "220515", "220573", "220757", "220770", "220902", "220907", "220930", "220936", "220955", "220966", "221105", "221110", "221116", "221126", "221141", "221147", "221161", "221177", "221189", "221212", "221330", "221339", "221346", "221352", "221380", "221462", "221503", "221532", "221596", "221761", "221777", "221791", "221804", "221831", "221867", "221882", "221913", "221924", "221942", "221947", "221957", "221976", "221983", "221989", "222064", "222098", "222248", "222270", "222275", "222294", "222308", "222353", "222367", "222416", "222455", "222469", "222521", "222528", "222579", "222600", "222655", "222793", "222841", "222850", "222855", "222916", "222943", "222968", "223014", "223025", "223055", "223068", "223142", "223172", "223216", "223241", "223245", "223255", "223287", "223301", "223307", "223312", "223318", "223427", "223499", "223523", "223547", "223563", "223568", "223668", "223690", "223768")

OFFSETS = OFFSETS + ("113046", "113075", "113122", "113159", "113233", "113283", "113327", "113367", "113408", "113456", "113723", "113805", "113656", "107963")

OFFSETS = list(dict.fromkeys(OFFSETS))

def lufia_text_dumper(args):
    source_file = args.source_file
    table1_file = args.table1
    dump_path = args.dump_path
    db = args.database_file
    if not args.no_crc32_check and crc32(source_file) != CRC32:
        sys.exit('SOURCE ROM CHECKSUM FAILED!')
    table = Table(table1_file)
    conn = sqlite3.connect(db)
    conn.text_factory = str
    cur = conn.cursor()
    shutil.rmtree(dump_path, ignore_errors=False)
    os.mkdir(dump_path)
    with open(source_file, 'rb') as f:
        id = 1
        for offset in OFFSETS:
            text_address = int(offset) - 0x200
            text = read_text(f, text_address, end_byte=b'\04', cmd_list={b'\x07': 1, b'\x08': 1, b'\x09': 1, b'\x0a': 1, b'\x0b': 1, b'\x0c': 1, b'\x0d': 1, b'\x0f': 1})
            text_decoded = table.decode(text, mte_resolver=True, dict_resolver=True, cmd_list={0x06: 1, 0x0f: 1})
            if len(text) < 3:
                print(f'{text_address} - {id} - {text_decoded}')
            ref = f'[BLOCK {id}: {hex(text_address)} to {hex(f.tell() - 1)}]'
            # dump - db
            insert_text(cur, id, text, text_decoded, text_address, '', 1, ref)
            # dump - txt
            filename = os.path.join(dump_path, 'dump_eng.txt')
            with open(filename, 'a+', encoding='utf-8') as out:
                out.write(f'{ref}\n{text_decoded}\n\n')
            id += 1
    cur.close()
    conn.commit()
    conn.close()

def lufia_misc_dumper(args):
    source_file = args.source_file
    table1_file = args.table1
    dump_path = args.dump_path
    if not args.no_crc32_check and crc32(source_file) != CRC32:
        sys.exit('SOURCE ROM CHECKSUM FAILED!')
    table = Table(table1_file)
    shutil.rmtree(dump_path, ignore_errors=True)
    os.mkdir(dump_path)
    with open(source_file, 'rb') as f, open(source_file, 'rb') as f1:
        # Items
        filename = os.path.join(dump_path, 'items.csv')
        with open(filename, 'w+', encoding='utf-8') as csv_file:
            csv_writer = csv.writer(csv_file)
            csv_writer.writerow(['text_address', 'text', 'trans'])
            pointers = {}
            f.seek(0x55800)
            while f.tell() < 0x559ff:
                pointers[f.tell()] = struct.unpack('H', f.read(2))[0] + 0x55800
            for key, value in pointers.items():
                f.seek(value)
                text = f.read(12)
                text_decoded = table.decode(text, mte_resolver=False, dict_resolver=False)
                fields = [hex(value), text_decoded]
                csv_writer.writerow(fields)
        # Enemy names
        filename = os.path.join(dump_path, 'enemy_names.csv')
        with open(filename, 'w+', encoding='utf-8') as csv_file:
            csv_writer = csv.writer(csv_file)
            csv_writer.writerow(['text_address', 'text', 'trans'])
            pointers = {}
            f.seek(0x5800)
            while f.tell() < 0x5949:
                pointers[f.tell()] = struct.unpack('H', f.read(2))[0] + 0x5800
            for key, value in pointers.items():
                f.seek(value)
                text = f.read(10)
                text_decoded = table.decode(text, mte_resolver=False, dict_resolver=False)
                fields = [hex(value), text_decoded]
                csv_writer.writerow(fields)
        # Magic
        filename = os.path.join(dump_path, 'magic.csv')
        with open(filename, 'w+', encoding='utf-8') as csv_file:
            csv_writer = csv.writer(csv_file)
            csv_writer.writerow(['text_address', 'text', 'trans'])
            pointers = {}
            f.seek(0xfdb00)
            while f.tell() < (0xfdb6f - (7 * 2)):
                pointers[f.tell()] = struct.unpack('H', f.read(2))[0] + 0xfdb00
            for key, value in pointers.items():
                f.seek(value)
                text = f.read(8)
                text_decoded = table.decode(text, mte_resolver=False, dict_resolver=False)
                fields = [hex(value), text_decoded]
                csv_writer.writerow(fields)
        # Magic descriptions
        filename = os.path.join(dump_path, 'magic_descriptions.csv')
        with open(filename, 'w+', encoding='utf-8') as csv_file:
            csv_writer = csv.writer(csv_file)
            csv_writer.writerow(['text_address', 'text', 'trans'])
            pointers = {}
            f.seek(0xfdb00)
            while f.tell() < (0xfdb6f - (7 * 2)):
                pointer_address = struct.unpack('H', f.read(2))[0] + 0xfdb00 + 15
                f1.seek(pointer_address)
                pointers[f1.tell()] = struct.unpack('H', f1.read(2))[0] + 0xfdb00
            for key, value in pointers.items():
                text = read_text(f, value, end_byte=b'\00')
                text_decoded = table.decode(text, mte_resolver=False, dict_resolver=False)
                fields = [hex(value), text_decoded]
                csv_writer.writerow(fields)
        # Attacks
        filename = os.path.join(dump_path, 'attacks.csv')
        with open(filename, 'w+', encoding='utf-8') as csv_file:
            csv_writer = csv.writer(csv_file)
            csv_writer.writerow(['text_address', 'text', 'trans'])
            pointers = {}
            f.seek(0x4150a)
            while f.tell() < 0x4157b:
                text_address = snes2pc_lorom(struct.unpack('H', f.read(2))[0]) + 0x40000
                f1.seek(text_address)
                pointers[f1.tell()] = text_address
            for key, value in pointers.items():
                text = read_text(f, value, end_byte=b'\00')
                text_decoded = table.decode(text, mte_resolver=False, dict_resolver=False)
                fields = [hex(value), text_decoded]
                csv_writer.writerow(fields)
        # MTE 1
        filename = os.path.join(dump_path, 'mte1.csv')
        with open(filename, 'w+', encoding='utf-8') as csv_file:
            csv_writer = csv.writer(csv_file)
            csv_writer.writerow(['text_address', 'text', 'trans'])
            pointers = {}
            f.seek(MTE1_POINTERS_OFFSETS[0])
            while f.tell() < MTE1_POINTERS_OFFSETS[1] - 2:
                text_address_start = snes2pc_lorom(struct.unpack('H', f.read(2))[0]) + 0x50000
                text_address_end = snes2pc_lorom(struct.unpack('H', f.read(2))[0]) + 0x50000
                text_length = text_address_end - text_address_start
                f1.seek(text_address_start)
                text = read_text(f1, text_address_start, length=text_length)
                text_decoded = table.decode(text, mte_resolver=False, dict_resolver=False)
                fields = [hex(text_address_start), text_decoded]
                csv_writer.writerow(fields)
                f.seek(-2, os.SEEK_CUR)
        # MTE 2
        filename = os.path.join(dump_path, 'mte2.csv')
        with open(filename, 'w+', encoding='utf-8') as csv_file:
            csv_writer = csv.writer(csv_file)
            csv_writer.writerow(['text_address', 'text', 'trans'])
            pointers = {}
            f.seek(MTE2_POINTERS_OFFSETS[0])
            while f.tell() < MTE2_POINTERS_OFFSETS[1] - 2:
                text_address_start = snes2pc_lorom(struct.unpack('H', f.read(2))[0]) + 0x50000
                text_address_end = snes2pc_lorom(struct.unpack('H', f.read(2))[0]) + 0x50000
                text_length = text_address_end - text_address_start
                f1.seek(text_address_start)
                text = read_text(f1, text_address_start, length=text_length)
                text_decoded = table.decode(text, mte_resolver=False, dict_resolver=False)
                fields = [hex(text_address_start), text_decoded]
                csv_writer.writerow(fields)
                f.seek(-2, os.SEEK_CUR)

def lufia_text_inserter(args):
    source_file = args.source_file
    dest_file = args.dest_file
    table2_file = args.table2
    translation_path = args.translation_path
    db = args.database_file
    user_name = args.user
    if not args.no_crc32_check and crc32(source_file) != CRC32:
        sys.exit('SOURCE ROM CHECKSUM FAILED!')
    table = Table(table2_file)
    buffer = {}
    #
    conn = sqlite3.connect(db)
    conn.text_factory = str
    cur = conn.cursor()
    rows = select_most_recent_translation(cur, ['1'])
    for row in rows:
        _, _, text_decoded, _, _, translation, _, _, ref = row
        splitted_line = ref.split(' ')
        block = int(splitted_line[1].replace(':', ''))
        offset_from = int(splitted_line[2], 16)
        offset_to = int(splitted_line[4].replace(']', ''), 16)
        buffer[block] = ['', [offset_from, offset_to]]
        text = translation if translation else text_decoded
        buffer[block][0] = text + '\n\n'
    cur.close()
    conn.commit()
    conn.close()
    #
    # translation_file = os.path.join(translation_path, 'dump_ita.txt')
    # with open(translation_file, 'r') as f:
    #     for line in f:
    #         if '[BLOCK ' in line:
    #             splitted_line = line.split(' ')
    #             block = int(splitted_line[1].replace(':', ''))
    #             offset_from = int(splitted_line[2], 16)
    #             offset_to = int(splitted_line[4].replace(']\n', ''), 16)
    #             buffer[block] = ['', [offset_from, offset_to]]
    #         else:
    #             buffer[block][0] += line
    #
    with open(dest_file, 'rb+') as f:

        ptr_table_offset = 0x100100
        new_text_offset = 0x108000
        next_bank_offset = new_text_offset + 0x8000

        index = 0

        for block, value in buffer.items():
            text, offsets = value
            offset_from, offset_to = offsets

            encoded_text = table.encode(text[:-2], mte_resolver=False, dict_resolver=True)  # Encode text

            f.seek(offset_from)  # Go the the offset of the original text

            if offsets[1] - offsets[0] < 3:
                if len(encoded_text) < 3:
                    f.write(encoded_text)
                continue

            # Cross bank check
            if new_text_offset + len(encoded_text) >= next_bank_offset:
                new_text_offset = next_bank_offset
                next_bank_offset += 0x8000

            # Write the Jump Byte
            f.write(b'\x7f')
            # Write the index of the pointer to the new location of the text
            f.write(struct.pack('<H', index))
            # Calculate the offset that goes inside the pointer table and go there
            index_offset = ptr_table_offset + (index * 3)
            f.seek(index_offset)

            # Check which dialog goes where and write the pointers into the pointer table
            new_text_pointer = struct.pack('i', pc2snes_lorom(new_text_offset))
            f.write(new_text_pointer[:3])

            # Write the return pointer into the pointer table
            return_pointer = struct.pack('i', pc2snes_lorom(offset_to))
            f.write(return_pointer[:3])

            index += 1

            # Move to the correct offset before writing the text
            f.seek(new_text_offset)

            # Write the text
            f.write(encoded_text)

            # Write the index to the return pointer at the end of the text
            f.write(b'\x7f')
            f.write(struct.pack('<H', index))
            new_text_offset = f.tell()

            index += 1

def lufia_misc_inserter(args):
    dest_file = args.dest_file
    table1_file = args.table1
    table2_file = args.table2
    translation_path = args.translation_path
    table = Table(table1_file)
    table2 = Table(table2_file)
    with open(dest_file, 'r+b') as f1, open(dest_file, 'r+b') as f2:
        # Enemy Names
        translation_file = os.path.join(translation_path, 'enemy_names.csv')
        translated_texts = get_csv_translated_texts(translation_file)
        for i, (_, t_address, t_value) in enumerate(translated_texts):
            text = table2.encode(t_value, mte_resolver=False, dict_resolver=False)
            if len(text) != 10:
                sys.exit(f'{t_value} exceeds')
            write_text(f1, t_address, text, length=10)
        # Items
        translation_file = os.path.join(translation_path, 'items.csv')
        translated_texts = get_csv_translated_texts(translation_file)
        for i, (_, t_address, t_value) in enumerate(translated_texts):
            text = table2.encode(t_value, mte_resolver=False, dict_resolver=False)
            if len(text) != 12:
                sys.exit(f'{t_value} exceeds')
            write_text(f1, t_address, text, length=12)
        # Magic
        translation_file = os.path.join(translation_path, 'magic.csv')
        translated_texts = get_csv_translated_texts(translation_file)
        for i, (_, t_address, t_value) in enumerate(translated_texts):
            text = table2.encode(t_value, mte_resolver=False, dict_resolver=False)
            if len(text) != 8:
                sys.exit(f'{t_value} exceeds')
            write_text(f1, t_address, text, length=8)
        # Magic descriptions
        pointers_addresses = []
        f2.seek(0xfdb00)
        while f2.tell() < 0xfdb6f:
            pointers_addresses.append(struct.unpack('H', f2.read(2))[0] + 0xfdb00 + 15)
        f1.seek(0x138000)
        translation_file = os.path.join(translation_path, 'magic_descriptions.csv')
        translated_texts = get_csv_translated_texts(translation_file)
        for i, (_, t_address, t_value) in enumerate(translated_texts):
            pointer = struct.pack('H', f1.tell() - 0x130000)
            f2.seek(pointers_addresses[i])
            f2.write(pointer)
            text = table2.encode(t_value, mte_resolver=False, dict_resolver=False)
            f1.write(text + b'\00')
        # Attacks
        f2.seek(0x4150a)
        f1.seek(0x140000)
        translation_file = os.path.join(translation_path, 'attacks.csv')
        translated_texts = get_csv_translated_texts(translation_file)
        for i, (_, t_address, t_value) in enumerate(translated_texts):
            pointer = struct.pack('H', f1.tell() - 0x138000)
            f2.write(pointer)
            text = table2.encode(t_value, mte_resolver=False, dict_resolver=False)
            f1.write(text + b'\00')
        # MTE 1
        f2.seek(MTE1_POINTERS_OFFSETS[0])
        f1.seek(0x54a72)
        translation_file = os.path.join(translation_path, 'mte1.csv')
        translated_texts = get_csv_translated_texts(translation_file)
        for i, (_, t_address, t_value) in enumerate(translated_texts):
            pointer = struct.pack('H', pc2snes_lorom(f1.tell() & 0x00FFFF))
            f2.write(pointer)
            text = table2.encode(t_value, mte_resolver=False, dict_resolver=False)
            if f1.tell() + len(text) - 1 > 0x54abf:
                sys.exit('MTE1 oversized!')
            f1.write(text)
        pointer = struct.pack('H', pc2snes_lorom(f1.tell() & 0x00FFFF))
        f2.write(pointer)
        # MTE 2
        f2.seek(MTE2_POINTERS_OFFSETS[0])
        f1.seek(0x54b42)
        translation_file = os.path.join(translation_path, 'mte2.csv')
        translated_texts = get_csv_translated_texts(translation_file)
        for i, (_, t_address, t_value) in enumerate(translated_texts):
            pointer = struct.pack('H', pc2snes_lorom(f1.tell() & 0x00FFFF))
            f2.write(pointer)
            text = table2.encode(t_value, mte_resolver=False, dict_resolver=False)
            if f1.tell() + len(text) - 1 > 0x54c16:
                sys.exit('MTE2 oversized!')
            f1.write(text)
        pointer = struct.pack('H', pc2snes_lorom(f1.tell() & 0x00FFFF))
        f2.write(pointer)

def lufia_gfx_dumper(args):
    source_file = args.source_file
    dump_path = args.dump_path
    if not args.no_crc32_check and crc32(source_file) != CRC32:
        sys.exit('SOURCE ROM CHECKSUM FAILED!')
    shutil.rmtree(dump_path, ignore_errors=True)
    os.mkdir(dump_path)
    with open(source_file, 'rb') as f:
        dump_binary(f, FONT1_BLOCK[0], FONT1_BLOCK[1], dump_path, 'gfx_font1.bin')
        dump_binary(f, FONT2_BLOCK[0], FONT2_BLOCK[1], dump_path, 'gfx_font2.bin')

def lufia_gfx_inserter(args):
    dest_file = args.dest_file
    translation_path = args.translation_path
    with open(dest_file, 'r+b') as f:
        insert_binary(f, FONT1_BLOCK[0], FONT1_BLOCK[1], translation_path, 'gfx_font1.bin')
        insert_binary(f, FONT2_BLOCK[0], FONT2_BLOCK[1], translation_path, 'gfx_font2.bin')
        insert_binary(f, 0x097c4d, 0x097c4d + 4497, translation_path, '097c4d_logo_ita_CMP.bin') # max size 4687

def lufia_expander(args):
    dest_file = args.dest_file
    expand_rom(dest_file, EXP_SIZE)

import argparse
parser = argparse.ArgumentParser()
parser.add_argument('--no_crc32_check', action='store_true', dest='no_crc32_check', required=False, default=False, help='CRC32 Check')
parser.set_defaults(func=None)
subparsers = parser.add_subparsers()
dump_text_parser = subparsers.add_parser('dump_text', help='Execute TEXT DUMP')
dump_text_parser.add_argument('-s', '--source', action='store', dest='source_file', required=True, help='Original filename')
dump_text_parser.add_argument('-t1', '--table1', action='store', dest='table1', help='Original table filename')
dump_text_parser.add_argument('-dp', '--dump_path', action='store', dest='dump_path', help='Dump path')
dump_text_parser.add_argument('-db', '--database', action='store', dest='database_file', help='DB filename')
dump_text_parser.set_defaults(func=lufia_text_dumper)
insert_text_parser = subparsers.add_parser('insert_text', help='Execute TEXT INSERTER')
insert_text_parser.add_argument('-s', '--source', action='store', dest='source_file', required=True, help='Original filename')
insert_text_parser.add_argument('-d', '--dest', action='store', dest='dest_file', required=True, help='Destination filename')
insert_text_parser.add_argument('-t2', '--table2', action='store', dest='table2', help='Modified table filename')
insert_text_parser.add_argument('-tp', '--translation_path', action='store', dest='translation_path', help='Translation path')
insert_text_parser.add_argument('-db', '--database', action='store', dest='database_file', help='DB filename')
insert_text_parser.add_argument('-u', '--user', action='store', dest='user', help='')
insert_text_parser.set_defaults(func=lufia_text_inserter)
dump_gfx_parser = subparsers.add_parser('dump_gfx', help='Execute GFX DUMP')
dump_gfx_parser.add_argument('-s', '--source', action='store', dest='source_file', required=True, help='Original filename')
dump_gfx_parser.add_argument('-dp', '--dump_path', action='store', dest='dump_path', help='Dump path')
dump_gfx_parser.set_defaults(func=lufia_gfx_dumper)
insert_gfx_parser = subparsers.add_parser('insert_gfx', help='Execute GFX INSERTER')
insert_gfx_parser.add_argument('-d', '--dest', action='store', dest='dest_file', required=True, help='Destination filename')
insert_gfx_parser.add_argument('-tp', '--translation_path', action='store', dest='translation_path', help='Translation path')
insert_gfx_parser.set_defaults(func=lufia_gfx_inserter)
dump_misc_parser = subparsers.add_parser('dump_misc', help='Execute MISC DUMP')
dump_misc_parser.add_argument('-s', '--source', action='store', dest='source_file', required=True, help='Original filename')
dump_misc_parser.add_argument('-t1', '--table1', action='store', dest='table1', help='Original table filename')
dump_misc_parser.add_argument('-dp', '--dump_path', action='store', dest='dump_path', help='Dump path')
dump_misc_parser.set_defaults(func=lufia_misc_dumper)
insert_misc_parser = subparsers.add_parser('insert_misc', help='Execute MISC INSERTER')
insert_misc_parser.add_argument('-d', '--dest', action='store', dest='dest_file', required=True, help='Destination filename')
insert_misc_parser.add_argument('-t1', '--table1', action='store', dest='table1', help='Original table filename')
insert_misc_parser.add_argument('-t2', '--table2', action='store', dest='table2', help='Modified table filename')
insert_misc_parser.add_argument('-tp', '--translation_path', action='store', dest='translation_path', help='Translation path')
insert_misc_parser.set_defaults(func=lufia_misc_inserter)
expand_parser = subparsers.add_parser('expand', help='Execute EXPANDER')
expand_parser.add_argument('-d', '--dest', action='store', dest='dest_file', required=True, help='Destination filename')
expand_parser.set_defaults(func=lufia_expander)

if __name__ == "__main__":
    args = parser.parse_args()
    if args.func:
        args.func(args)
    else:
        parser.print_help()
